---

AWSTemplateFormatVersion: 2010-09-09
Description: A template that stands up a slackbot lambda function.
Parameters:
  AllowedIpAddressRange:
    Type: String
    Description: The CIDR range to restrict access to for the API gateway
  ApiGatewayName:
    Type: String
    Default: slackbot-gateway
    Description: The name of the api gateway
  App:
    Type: String
    Default: Slackbot
    Description: The name of the application
  Env:
    Type: String
    Default: dev
    Description: The name of the environment the resources will be deployed to
  LambdaFuncName:
    Type: String
    Default: slackbot-func
    Description: The name of the lambda function
  LambdaPolicyName:
    Type: String
    Default: slackbot-func-policy
    Description: The name of the lambda role policy
  LambdaRoleName:
    Type: String
    Default: slackbot-func-role
    Description: The name of the lambda role
Resources:
  SlackbotGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: The rest api gateway that will trigger the lambda function
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Sub ${Env}-${ApiGatewayName}-${AWS::Region}
      Policy:
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "execute-api:Invoke",
              "Resource": !Sub "*execute-api:${AWS::Region}:${AWS::AccountId}:*/*",
              "Condition": {
                "IpAddress": {
                  "aws:SourceIp": !Sub "${AllowedIpAddressRange}"
                }
              }
            }
          ]
        }
      Tags:
        - Key: "App"
          Value: !Sub ${App}
  SlackbotGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: SlackbotGatewayRootMethod
    Properties:
      RestApiId: !Ref SlackbotGateway
      StageName: !Sub ${Env}
  SlackbotGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt SlackbotGateway.RootResourceId
      PathPart: !Sub ${App}
      RestApiId: !Ref SlackbotGateway
  SlackbotGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: 
          Fn::Join:
            - ':'
            - - 'arn'
              - !Ref AWS::Partition
              - 'apigateway'
              - !Ref AWS::Region
              - 'lambda'
              - !Sub path/2015-03-31/functions/${SlackbotFunction.Arn}/invocations
      ResourceId: !GetAtt SlackbotGatewayResource.ResourceId
      RestApiId: !Ref SlackbotGateway
  SlackbotFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Architectures: 
        - x86_64
      Code: 
        ZipFile: |
          import json

          def lambda_handler(event, context):
            return {
              'statusCode': 200,
              'body': json.dumps('Hello world from Lambda!')
            }
      FunctionName: !Sub ${Env}-${LambdaFuncName}-${AWS::Region}
      Handler: index.lambda_handler
      MemorySize: 128
      PackageType: Zip
      Role: !GetAtt SlackbotFunctionRole.Arn
      Runtime: python3.9
      Tags:
        - Key: "App"
          Value: !Sub ${App}      
  SlackbotFunctionLogs:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${Env}-${LambdaFuncName}-${AWS::Region}
      Tags:
        - Key: "App"
          Value: !Sub ${App}      
  SlackbotFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: The iam role that will be used to execute the lambda function
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
              Service:
                lambda.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - !Ref SlackbotFunctionRolePolicy
      RoleName: !Sub ${Env}-${LambdaRoleName}-${AWS::Region}
      Tags:
        - Key: "App"
          Value: !Sub ${App}
  SlackbotFunctionRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: The policy for the iam role that will be used to execute the lambda function
      ManagedPolicyName: !Sub ${Env}-${LambdaPolicyName}-${AWS::Region}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
              Resource: !GetAtt SlackbotFunctionLogs.Arn
            - Effect: Allow
              Action:
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: !GetAtt SlackbotFunctionLogs.Arn
  SlackbotFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SlackbotFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: 
        Fn::Join:
          - ':'
          - - 'arn'
            - !Ref AWS::Partition
            - 'execute-api'
            - !Ref AWS::Region
            - !Ref AWS::AccountId
            - !Sub '${SlackbotGateway}/*/*'
